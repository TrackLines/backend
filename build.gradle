/**
 * Build
 */
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://repo.spring.io/plugins-release"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE"
        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"
    }
}

/**
 *  Plugins
 */
plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "war"

    id "org.springframework.boot" version "1.5.4.RELEASE"
    id "org.owasp.dependencycheck" version "2.1.0"

    id "jp.classmethod.aws" version "0.35"
    id "jp.classmethod.aws.beanstalk" version "0.35"
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

/**
 * Repositories
 */
repositories {
    mavenCentral()
}

/**
 * Depdendencies
 */
dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"

    compile group: "org.hibernate", name: "hibernate-validator", version: "5.4.1.Final"
    compile group: "org.elasticsearch", name: "elasticsearch", version: "5.5.0"

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "junit:junit"

    optional "org.springframework.boot:spring-boot-configuration-processor"
}

compileJava.dependsOn(processResources)

/**
 *   Project Settings
 */
group = 'es.tracklin'
version = '0.1.0'

ext {
    artifactId = "backend"
    timestamp = new Date().format("yyyyMMdd'_'HHmmss", TimeZone.default)
    versionDesc = "${version}-${timestamp}"
    defaultEncoding = "UTF-8"
}

sourceCompatibility = targetCompatibility = 1.8

/**
 *   Task Settings
 */
tasks.withType(AbstractCompile) each {
    it.options.encoding = ext.defaultEncoding
}

aws {
    profileName = 'default'
    region = 'eu-west-1'
}

jar {
    baseName = "${artifactId}"
    version = "${version}"
    destinationDir =  file("$rootDir/build/bundle")
}

war {
    baseName = artifactId
    version = null
    destinationDir =  file("$rootDir/build/bundle")
}

springBoot {
    mainClass = "es.tracklin.Backend"
}

bootRepackage {
    mainClass = "es.tracklin.Backend"
    executable = true
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/config"
        }
    }
}

bootRepackage {
    mainClass = "es.trackln.Backend"
    executable = true
}

beanstalk {
    String extension = project.war.archiveName.tokenize('.').last()
    String timestamp = new Date().format("yyyyMMdd'_'HHmmss", TimeZone.default)

    appName 'BackEnd'
    appDesc "Tracklines BackEnd"

    version {
        label = "backend-${project.war.version}-${timestamp}"
        description = "${artifactId} v${version}"
        bucket = "tracklines-builds"
        key = "/backend-${project.war.version}-${timestamp}.${extension}"
    }

    configurationTemplates {
        production {
            optionSettings = file('src/main/config/production.json')
            solutionStackName = '64bit Amazon Linux 2017.03 v.2.5.2 running  Java 8'
        }
        development {
            optionSettings = file('src/main/config/development.json')
            solutionStackName = '64bit Amazon Linux 2017.03 v.2.5.2 running  Java 8'
        }
    }

    environment {
        envName = 'backend'
        envDesc = 'TrackLines BackEnd Development'
        templateName = 'development'
        versionLabel = 'backend-${project.war.version}-${timestamp}'
    }
}

/**
 *   Named Tasks
 */
task createDockerfile(type: Copy, dependsOn: build) {
    from "src/main/bundle/Dockerfile"
    into "build/bundle"
    expand(jarFilename: 'backend.jar', artifactId: project.artifactId)
}

task createBundleResources(type: Copy) {
	from "src/main/bundle"
	into "build/bundle"
	exclude "src/main/bundle/Dockerfile"
}

task createBundle(type: Zip, dependsOn: [createDockerfile, createBundleResources, bootRepackage]) {
	archiveName = jar.archiveName.substring(0, jar.archiveName.length() - 4) + ".zip"
	from "build/bundle"
	from jar.archivePath
}

task uploadBundle(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask, dependsOn: createBundle) {
	group "AWS"
	description "Upload ${artifactId} application bundle file to S3."

	bucketName "elasticbeanstalk-${aws.region}-${aws.accountId}"
	key "eb-apps/${artifactId}/${artifactId}-${versionDesc}.zip"
	file project.createBundle.archivePath
	overwrite project.version.endsWith("-SNAPSHOT")
}

awsEbCreateApplicationVersion.dependsOn uploadBundle
